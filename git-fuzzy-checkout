#!/bin/bash

# Requires 'fzf'
# check_dependency fzf git || exit 1
if ! command -v fzf &> /dev/null
then
    echo ' git-fuzzy-checkout requires "fzf".
 Install it following these instructions: https://github.com/junegunn/fzf#installation'

    exit 1
fi

HELP_TEXT="
git fuzzy-checkout

Check out branches quickly with the power of \`fzf\`.
Default view is local branches (HEADS).

Usage:
    git fuzzy-checkout [OPTIONS] <QUERY>


OPTIONS:
    -a : Show branches from heads and remotes
    -r : Show branches from remotes
    -t : Show branches from tags

    -h : Show help

QUERY:
    An optional query to immediately filter the ref list.
    This is passed to \`fzf\` as the initial query, and can be changed.

Examples
    git fuzzy-checkout             # Show branches from heads (local)

    git fuzzy-checkout LPS-12345   # Show branches that match the query 'LPS-12345':

    git fuzzy-checkout -r          # Show branches from remotes

    git fuzzy-checkout -a          # Show branches from heads and remotes

    git fuzzy-checkout -t          # Show branches from tags
"

### Determine whether to search local, remotes, or all

COMMAND_ALL="git for-each-ref refs/heads refs/remotes refs/tags"
COMMAND_HEADS="git for-each-ref refs/heads"
COMMAND_REMOTES="git for-each-ref refs/remotes"
COMMAND_TAGS="git for-each-ref refs/tags"

PROMPT_ALL="Filter all refs > "
PROMPT_HEADS="Filter local branches > "
PROMPT_REMOTES="Filter remote branches > "
PROMPT_TAGS="Filter tags > "

COMMAND="${COMMAND_HEADS}"
PROMPT="${PROMPT_HEADS}"

while getopts "ahrt" FLAGS; do
	case $FLAGS in
	a) COMMAND="${COMMAND_ALL}" ; PROMPT="${PROMPT_ALL}" ;;
	h) echo "$HELP_TEXT" && exit 0 ;;
	r) COMMAND="${COMMAND_REMOTES}" ; PROMPT="${PROMPT_REMOTES}" ;;
	t) COMMAND="${COMMAND_TAGS}" ; PROMPT="${PROMPT_TAGS}" ;;
	*) exit 1 ;;
	esac
done

shift $((OPTIND - 1))

### Set up display

DELIMITER=" :: "

FZF_HEADER="""
enter:            check out branch
alt-space:        toggle preview window (shows limited 'git log' of the selected branch)
alt-bspace:       delete branch
alt-l:            invoke 'git log' on selected branch
alt-y:            copy branch name to clipboard
alt-[a h r t]:    show [ALL HEADS REMOTES TAGS]

"""

# Set up clipboard command per OS. Default to Linux xsel.
CLIPBOARD_COMMAND="xsel --input"

[ "${OSTYPE//[0-9.]/}" = "darwin" ] && CLIPBOARD_COMMAND="pbcopy"

GIT_BRANCH_DISPLAY_FORMAT=""

GIT_BRANCH_DISPLAY_FORMAT+="%(committerdate:short)"
GIT_BRANCH_DISPLAY_FORMAT+="${DELIMITER}%(color:yellow)%(refname:short)%(color:reset)"
GIT_BRANCH_DISPLAY_FORMAT+="%(if)%(upstream)%(then)${DELIMITER}%(upstream:short)%(end)"

RELOAD_SUFFIX="--color=always --format='${GIT_BRANCH_DISPLAY_FORMAT}' --sort=-committerdate"

FZF_ARGS=(
	--ansi

	--bind="alt-space:toggle-preview"
	--bind="enter:execute(git checkout {2})+accept"
	--bind="alt-bspace:execute-silent(git branch -D {+2})+reload(${COMMAND} ${RELOAD_SUFFIX})"
	--bind="alt-y:execute(printf {+2} | ${CLIPBOARD_COMMAND})"
	--bind="alt-l:execute(git log {+2})"

	--bind="alt-a:become($0 -a {q})"
	--bind="alt-h:become($0 {q})"
	--bind="alt-r:become($0 -r {q})"
	--bind="alt-t:become($0 -t {q})"

	--bind="load:change-prompt(${PROMPT})"

	--delimiter="${DELIMITER}"
	--exact
	--header="${FZF_HEADER}"
	--header-first
	--info="inline"
	--multi
	--nth="2,3"
	--no-sort
	--preview-window="down:70%:hidden"
	--preview="git log -500 --color=always --oneline {2}"
	--prompt="Loading... "
	--query "$*"
	--reverse
)

### Go

${COMMAND} \
	--color=always \
	--format="${GIT_BRANCH_DISPLAY_FORMAT}" \
	--sort=-committerdate |
fzf "${FZF_ARGS[@]}"
