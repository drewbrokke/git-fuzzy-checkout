#!/bin/bash

if ! git rev-parse --is-inside-work-tree &>/dev/null; then
	echo ' Not inside of a git repository'

	exit 1
fi

if ! command -v fzf &>/dev/null; then
	echo ' git-fuzzy-checkout requires "fzf".
 Install it following these instructions: https://github.com/junegunn/fzf#installation'

	exit 1
fi

HELP_TEXT="
git fuzzy-checkout

Check out branches quickly with the power of \`fzf\`.
Default view is local branches (HEADS).

Usage:
    git fuzzy-checkout [OPTIONS] <QUERY>


OPTIONS:
    -a : Show branches from heads and remotes
    -r : Show branches from remotes
    -t : Show branches from tags

    -h : Show help

QUERY:
    An optional query to immediately filter the ref list.
    This is passed to \`fzf\` as the initial query, and can be changed.

Examples
    git fuzzy-checkout             # Show branches from heads (local)

    git fuzzy-checkout LPS-12345   # Show branches that match the query 'LPS-12345':

    git fuzzy-checkout -r          # Show branches from remotes

    git fuzzy-checkout -a          # Show branches from heads and remotes

    git fuzzy-checkout -t          # Show branches from tags
"

### Determine whether to search local, remotes, or all

LABEL_ALL_REFS="all refs"
LABEL_LOCAL_BRANCHES="local branches"

GIT_ARGS=(for-each-ref refs/heads)
LABEL="${LABEL_LOCAL_BRANCHES}"
SHOW_CHECKED_OUT_BRANCH=1

while getopts "ahrt" FLAGS; do
	case $FLAGS in
		a)
			GIT_ARGS=(for-each-ref refs/heads refs/remotes refs/tags)
			LABEL="${LABEL_ALL_REFS}"
			SHOW_CHECKED_OUT_BRANCH=1
			;;
		h)
			echo "$HELP_TEXT" && exit 0
			;;
		r)
			GIT_ARGS=(for-each-ref refs/remotes)
			LABEL="remote branches"
			SHOW_CHECKED_OUT_BRANCH=0
			;;
		t)
			GIT_ARGS=(for-each-ref refs/tags)
			LABEL="tags"
			SHOW_CHECKED_OUT_BRANCH=0
			;;
		*)
			exit 1
			;;
	esac
done

shift $((OPTIND - 1))

GIT_ARGS+=(--color=always --sort=-committerdate --sort=-HEAD)

### Set up display

DELIMITER=" :: "

FZF_HEADER="
<Enter>      Check out selected branch
<Control-h>  Show all key bindings

"

ALT_KEY_NAME="Alt"
CLIPBOARD_COMMAND="xsel --input"

# Adjust if on Mac
if [ "${OSTYPE//[0-9.]/}" = "darwin" ]; then
	ALT_KEY_NAME="Opt"
	CLIPBOARD_COMMAND="pbcopy"
fi

function decorate() {
	# escape format: \e[{codes}m
	# reset = 0
	# bold = 1
	# underline = 4
	printf "\e[1;4m%s\e[0m" "${*}"
}

KEY_COMMANDS_HELP_TEXT="""
\e[1mKey Bindings:

----------------------------------------

$(decorate "<Enter>")

	Check out selected branch

$(decorate "<${ALT_KEY_NAME}-Space>")

	Toggle preview window (shows limited 'git log' of the selected branch)

$(decorate "<${ALT_KEY_NAME}-Backspace>")

	Delete branch (only available in HEADS view)

$(decorate "<${ALT_KEY_NAME}-l>")

	Invoke 'git log' on selected branch

$(decorate "<${ALT_KEY_NAME}-y>")

	Copy branch name to clipboard

$(decorate "<${ALT_KEY_NAME}-[a h r t]>")

	Show [ALL HEADS REMOTES TAGS]

$(decorate "<Control-h>")

	Show all key bindings
"""

DISPLAY_ELEMENT_TYPE_FIELD=""
if [[ "${LABEL}" = "${LABEL_ALL_REFS}" ]]; then
	DISPLAY_ELEMENT_TYPE_FIELD+="%(align:9) ("
	DISPLAY_ELEMENT_TYPE_FIELD+="%(if:equals=refs/heads)%(refname:rstrip=-2)%(then)branch%(end)"
	DISPLAY_ELEMENT_TYPE_FIELD+="%(if:equals=refs/remotes)%(refname:rstrip=-2)%(then)remote%(end)"
	DISPLAY_ELEMENT_TYPE_FIELD+="%(if:equals=refs/tags)%(refname:rstrip=-2)%(then)tag%(end)"
	DISPLAY_ELEMENT_TYPE_FIELD+=")%(end)"
fi

GIT_BRANCH_DISPLAY_ELEMENTS=(
	"%(color:white)"

	"%(if)%(HEAD)%(then)"
	"%(color:dim)"
	"* "
	"%(else)"
	"  "
	"%(end)"

	"%(align:10)%(committerdate:short)%(end)"

	"${DISPLAY_ELEMENT_TYPE_FIELD}"

	"${DELIMITER}"

	"%(color:yellow)"
	"%(refname:short)"

	"%(if)%(upstream)%(then)"
	"%(color:white)"

	"${DELIMITER}"

	"%(upstream:short)"
	"%(end)"
)

# Print the array to a variable, but NOT space-separated
# See https://stackoverflow.com/questions/13470413/converting-a-bash-array-into-a-delimited-string/49167382#49167382
printf -v GIT_BRANCH_DISPLAY_FORMAT '%s' "${GIT_BRANCH_DISPLAY_ELEMENTS[@]}"

# Expand the args to a string now so it will be usable by fzf in the reload command
GIT_ARGS_STRING="${GIT_ARGS[*]} --format='${GIT_BRANCH_DISPLAY_FORMAT}'"

# This will be used in the initial invocation
GIT_ARGS+=(--format="${GIT_BRANCH_DISPLAY_FORMAT}")

LOADED_PROMPT_TEXT="Filter ${LABEL} > "
LOADING_PROMPT_TEXT="Loading ${LABEL} > "

if [ -z "${GIT_FUZZY_CHECKOUT_FZF_COLORS}" ]; then
	GIT_FUZZY_CHECKOUT_FZF_COLORS="scrollbar:-1:bold"
fi

FZF_ARGS=(
	--ansi

	--bind="alt-space:toggle-preview"
	--bind="enter:execute(git checkout {2})+accept"
	--bind="alt-y:execute(printf {+2} | ${CLIPBOARD_COMMAND})"
	--bind="alt-l:execute(git log {+2})"

	--bind="alt-a:become($0 -a {q})"
	--bind="alt-h:become($0 {q})"
	--bind="alt-r:become($0 -r {q})"
	--bind="alt-t:become($0 -t {q})"

	--bind="load:change-prompt(${LOADED_PROMPT_TEXT})"

	--bind="ctrl-h:execute(echo '${KEY_COMMANDS_HELP_TEXT}' | ${PAGER})"

	--color="${GIT_FUZZY_CHECKOUT_FZF_COLORS}"

	--delimiter="${DELIMITER}"
	--exact
	--header="${FZF_HEADER}"
	--info="inline"
	--multi
	--nth="2,3"
	--no-sort
	--preview-window="down:70%:hidden"
	--preview="git log -500 --color=always --oneline {2}"
	--prompt="${LOADING_PROMPT_TEXT}"
	--query "$*"
	--reverse
)

if [[ "${LABEL}" = "${LABEL_LOCAL_BRANCHES}" ]]; then
	FZF_ARGS+=(--bind="alt-bspace:execute-silent(git branch -D {+2})+reload(git ${GIT_ARGS_STRING})")
fi

if [ "${SHOW_CHECKED_OUT_BRANCH}" -ge 1 ] && git symbolic-ref HEAD &>/dev/null; then
	FZF_ARGS+=(--header-lines=1)
fi

### Go

git "${GIT_ARGS[@]}" | fzf "${FZF_ARGS[@]}"
